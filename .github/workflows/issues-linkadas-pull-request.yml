name: CHECK - Issues linkadas a Pull Request

permissions:
  issues: read  # Permiss√£o para ler issues

# O workflow ser√° acionado sempre que um Pull Request for criado ou atualizado com destino √† branch 'main'.
on: 
  pull_request:
    branches:
      - main   # O workflow ser√° acionado apenas para Pull Requests na branch 'main'.
    types:
      - opened                         # Quando um novo PR √© aberto
      - synchronize                    # Quando novos commits s√£o enviados para um PR existente
      - reopened                       # Quando um PR fechado √© reaberto
      - unlocked                       # Quando um PR bloqueado √© desbloqueado
      - edited                         # Quando a descri√ß√£o ou t√≠tulo de um PR √© editado

jobs:
  # Job respons√°vel por verificar se o Pull Request est√° vinculado a issues.
  check-issues-linkadas-pull-request:
    runs-on: ubuntu-latest             # O job ser√° executado em uma VM com o sistema Ubuntu mais recente.
    timeout-minutes: 10                # Tempo m√°ximo de execu√ß√£o do job √© de 10 minutos.

    steps:
      - name: Verificar se o Pull Request est√° vinculado a issues
        run: |
          # Captura a descri√ß√£o do Pull Request
          pr_description=$(jq -r .pull_request.body < $GITHUB_EVENT_PATH)

          echo "=============================="
          echo "**Iniciando verifica√ß√£o do v√≠nculo...**"
          echo ""
          echo "Para garantir que o seu Pull Request esteja vinculado a uma issue, utilize a sintaxe 'Closes: #XXX'. Isso fechar√° automaticamente a issue quando o PR for aprovado e mesclado."
          echo ""
          echo "üí° Dica:"
          echo "Aqui est√£o alguns exemplos v√°lidos:"
          echo " - 'Closes: #42'"
          echo ""
          echo "Para mais informa√ß√µes, acesse o guia de contribui√ß√£o na se√ß√£o de envio: ../CONTRIBUTING.md#-enviando"
          echo ""

          # Verifica se a descri√ß√£o do PR cont√©m a sintaxe de fechamento de issue
          if [[ "$pr_description" =~ Closes:\ #[[:space:]]*([0-9]{1,10}) ]]; then
            issue_number="${BASH_REMATCH[1]}"  # n√∫mero da issue est√° encapsulada entre par√™nteses para que BASH_REMATCH consiga captur√°-la.
            echo "‚úÖ Pull Request vinculado a uma issue '$issue_number'."

            # Verifica se a issue realmente existe utilizando curl
            echo "üîç Verificando a exist√™ncia da issue '$issue_number'..."
            
            response=$(curl -s -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/$issue_number")

            # Verifica se a issue existe
            if echo "$response" | grep -q '"number": '$issue_number; then
              echo "‚úÖ A issue '$issue_number' existe."
            else
              echo "‚ùå A issue '$issue_number' n√£o existe."
              echo ""
              echo "‚ö†Ô∏è Aten√ß√£o:"
              echo "Edite a descri√ß√£o do Pull Request e informe um n√∫mero de issue v√°lido antes de continuar."
              echo ""
              exit 1  # Finaliza com erro, bloqueando a mesclagem
            fi
          else
            echo "‚ùå Pull Request n√£o vinculado a nenhuma issue."
            echo ""
            echo "‚ö†Ô∏è Aten√ß√£o:"
            echo "Edite a descri√ß√£o do Pull Request e informe o n√∫mero da issue antes de continuar."
            echo ""
            exit 1  # Finaliza com erro, bloqueando a mesclagem
          fi

          echo "----------------------------------------------"
          echo "**Verifica√ß√£o conclu√≠da com sucesso.**"
        shell: bash  # Define o shell bash para execu√ß√£o dos comandos.